<!DOCTYPE html ><html><head><META http-equiv="Content-Type" content="text/html; charset=utf-8"><meta charset="utf-8"><link rel="shortcut icon" href="../icons/favicon.ico"><link rel="stylesheet" type="text/css" href="../styles/branding.css"><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css"><script type="text/javascript" src="../scripts/branding.js"> </script><title>Template Expansion</title><meta name="Language" content="en-us"><meta name="Microsoft.Help.Id" content="c41f4654-8fdb-4bf8-9b29-9d9a6f270496"><meta name="Description" content="Template expansion is the process of expanding a URI Template according to specific values for its variables. This is the core operation defined by RFC 6570 and the primary feature provided by this library."><meta name="Microsoft.Help.ContentType" content="Concepts"><meta name="BrandingAware" content="true"><link type="text/css" rel="stylesheet" href="../styles/highlight.css"><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css"><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle"><div class="pageHeader" id="PageHeader">URI Template API Reference<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="6e0966b1-bd21-44ee-bbf3-cd475ac0ebdd.htm" title="URI Template API Reference" tocid="roottoc">URI Template API Reference</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="6a7fb475-8e7d-4b8e-9f66-c33506fe0115.htm" title="User Guide" tocid="6a7fb475-8e7d-4b8e-9f66-c33506fe0115">User Guide</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="56dfe688-42d6-46f0-9cb7-a9d7176ef249.htm" title="Installation" tocid="56dfe688-42d6-46f0-9cb7-a9d7176ef249">Installation</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="c41f4654-8fdb-4bf8-9b29-9d9a6f270496.htm" title="Template Expansion" tocid="c41f4654-8fdb-4bf8-9b29-9d9a6f270496">Template Expansion</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7e56a038-ad98-4922-9342-7f68a5b89283.htm" title="Template Matching" tocid="7e56a038-ad98-4922-9342-7f68a5b89283">Template Matching</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="8e5cf0b3-d565-44f8-a763-6586cf5e56db.htm" title="Migration Guide" tocid="8e5cf0b3-d565-44f8-a763-6586cf5e56db">Migration Guide</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize"><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize"></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Template Expansion</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
        Template expansion is the process of expanding a URI Template according
        to specific values for its variables. This is the core operation defined
        by RFC 6570 and the primary feature provided by this library. The binding
        operation itself is implemented by the
        <a href="Overload_TunnelVisionLabs_Net_UriTemplate_BindByName.htm">BindByName<span id="LST7F1BE4E5_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F1BE4E5_0?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>
        methods; this page describes a high-level overview of the behavior of
        these methods with respect to RFC 6570.
      </p></div><div class="collapsibleAreaRegion" id="Templates"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png">Creating Templates</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          URI Template instances are created by calling
          <a href="M_TunnelVisionLabs_Net_UriTemplate__ctor.htm">UriTemplate(String)</a>
          with the template in the form described RFC 6570 (Level 4). URI Templates
          are parsed at the time they are constructed to ensure they meet the
          syntax requirements described in RFC 6570 and identify expression
          expansions for efficient binding. The following examples show the
          templates described in the Remarks section of the .NET Framework
          <a href="http://msdn2.microsoft.com/en-us/library/bb515764" target="_blank">UriTemplate</a>
          documentation, converted to RFC 6570 syntax.
        </p><ul><li><p>
              "weather/WA/Seattle"
            </p></li><li><p>
              "weather/{state}/{city}"
            </p></li><li><p>
              "weather/{+rest}"
            </p></li><li><p>
              "weather/{state}/{city}?forecast=today"
            </p></li><li><p>
              "weather/{state}/{city}{?forecast}"
            </p></li></ul><p>
          The following example demonstrates the basic construction and binding of
          a template instance.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACBCAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACBCAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACBCAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACBCAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">UriTemplate template = <span class="highlight-keyword">new</span> UriTemplate(<span class="highlight-literal">"weather/{state}/{city}{?forecast}"</span>);

Dictionary&lt;<span class="highlight-keyword">string</span>, <span class="highlight-keyword">string</span>&gt; parameters = <span class="highlight-keyword">new</span> Dictionary&lt;<span class="highlight-keyword">string</span>, <span class="highlight-keyword">string</span>&gt;
{
    { <span class="highlight-literal">"state"</span>, <span class="highlight-literal">"WA"</span> },
    { <span class="highlight-literal">"city"</span>, <span class="highlight-literal">"Seattle"</span> },
    { <span class="highlight-literal">"forecast"</span>, <span class="highlight-literal">"today"</span> }
};

Uri boundAddress = template.BindByName(parameters);
Console.WriteLine(boundAddress);
<span class="highlight-comment">// Output:</span>
<span class="highlight-comment">// weather/WA/Seattle?forecast=today</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACBCAAA");</script><p>
          By specifying a base address in addition to the parameters, an absolute
          URI is produced by the expansion operation.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABCAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABCAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAABCAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABCAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">UriTemplate template = <span class="highlight-keyword">new</span> UriTemplate(<span class="highlight-literal">"weather/{state}/{city}{?forecast}"</span>);

Dictionary&lt;<span class="highlight-keyword">string</span>, <span class="highlight-keyword">string</span>&gt; parameters = <span class="highlight-keyword">new</span> Dictionary&lt;<span class="highlight-keyword">string</span>, <span class="highlight-keyword">string</span>&gt;
{
    { <span class="highlight-literal">"state"</span>, <span class="highlight-literal">"WA"</span> },
    { <span class="highlight-literal">"city"</span>, <span class="highlight-literal">"Seattle"</span> },
    { <span class="highlight-literal">"forecast"</span>, <span class="highlight-literal">"today"</span> }
};

Uri baseAddress = <span class="highlight-keyword">new</span> Uri(<span class="highlight-literal">"http://www.example.com"</span>);
Uri boundAddress = template.BindByName(baseAddress, parameters);
Console.WriteLine(boundAddress);
<span class="highlight-comment">// Output:</span>
<span class="highlight-comment">// http://www.example.com/weather/WA/Seattle?forecast=today</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABCAAA");</script><h4 class="subHeading">Best Practices</h4><div class="subsection"><p>
              Due to the heavy use of regular expressions within this library,
              several "best practices" should be followed to maximize the overall
              performance.
            </p><h4 class="subHeading">Use shared template instances</h4><div class="subsection"><p>
                  Instances of the
                  <a href="T_TunnelVisionLabs_Net_UriTemplate.htm">UriTemplate</a>
                  class are safe for use in multi-threaded applications. If a
                  single template string will be used multiple times for expansion
                  or matching, a <span class="code">static</span> variable should be
                  initialized with the template and reused each time it is needed.
                </p></div><h4 class="subHeading">Use the "portable" library only when necessary</h4><div class="subsection"><p>
                  The Portable Class Library for the .NET Framework does not support
                  the creation of compiled regular expressions. In particular, the
                  <a href="http://msdn2.microsoft.com/en-us/library/443e8hc7" target="_blank">Compiled</a>
                  flag is not available. To maximize performance, use the
                  <span class="code">net40-client</span> build instead.
                </p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note"> Note</th></tr><tr><td><p>
                    When installing this library using the NuGet Package Manager within
                    Visual Studio, this best practice rule is followed by default.
                  </p></td></tr></table></div></div></div></div><div class="collapsibleAreaRegion" id="Parameters"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png">Template Parameters</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          Template parameters fall into three categories; using the terminology
          of RFC 6570, these are strings, lists, and associative arrays. The
          following table shows the relation between these values and their
          corresponding .NET types.
        </p><div class="tableSection"><table><tr><th><p>RFC 6570</p></th><th><p>.NET Framework</p></th></tr><tr><td><p>String</p></td><td><p>
                Any object which is not considered a list or associative array.
              </p></td></tr><tr><td><p>List</p></td><td><p>
                Any
                <a href="http://msdn2.microsoft.com/en-us/library/h1x9x1b1" target="_blank">IEnumerable</a>
                which is not considered an associative array, with the exception of
                <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>.
              </p></td></tr><tr><td><p>Associative array</p></td><td><p>
                Any
                <a href="http://msdn2.microsoft.com/en-us/library/s4ys34ea" target="_blank">IDictionary<span id="LST7F1BE4E5_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F1BE4E5_1?cs=<|vb=(Of |cpp=<|nu=(|fs=<'");</script>TKey, TValue<span id="LST7F1BE4E5_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F1BE4E5_2?cs=>|vb=)|cpp=>|nu=)|fs=>");</script></a>
                or
                <a href="http://msdn2.microsoft.com/en-us/library/9dhwsays" target="_blank">IDictionary</a>.
              </p></td></tr></table></div><p>
          The rules for binding variables within a template are fully described in
          RFC 6570. For this library, the following behavior is provided which is
          only relevant to a .NET implementation.
        </p><ul><li><p>
              "Undefined" string values, described in RFC 6570 §2.3, are specified
              as a <span class="code">null</span> reference.
            </p></li><li><p>
              If a value is provided which is treated as a "String" value according
              to the table above, but is not of type
              <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>, the value
              is first converted to a string using the
              <a href="http://msdn2.microsoft.com/en-us/library/7bxwbwt2" target="_blank">ToString<span id="LST7F1BE4E5_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F1BE4E5_3?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a> method.
            </p></li><li><p>
              If the template expansion process is performed using one of the
              <a href="Overload_TunnelVisionLabs_Net_UriTemplate_BindByName.htm">BindByName<span id="LST7F1BE4E5_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7F1BE4E5_4?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>
              methods which includes a <span class="code">baseAddress</span> argument,
              the result of the template expansion is evaluated as a relative URI
              against the base address using the
              <a href="http://msdn2.microsoft.com/en-us/library/ceyeze4f" target="_blank">Uri(Uri, Uri)</a>
              constructor.
            </p></li></ul></div></div></div><div id="pageFooter" class="pageFooter"><a href="https://github.com/tunnelvisionlabs/dotnet-uritemplate">URI Template Library Home</a></div></body></html>